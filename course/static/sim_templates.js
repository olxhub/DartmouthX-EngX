angular.module('simulation.template', []).run(function($templateCache){$templateCache.put('simulation', '<md-content ng-init="simDetails = false"><md-toolbar class="md-whiteframe-z1 toolbar"><section layout="row" layout-align="left center"><md-button ng-click="simulation.tick(dt)" flex="10">Tick</md-button><md-button ng-click="simulation.toggle()" flex="10">{{ simulation.running ? \'Pause\': \'Run\' }}</md-button><md-button ng-click="simulation.reset()" flex="10">Reset</md-button><md-text-float flex="60" label="Milliseconds" ng-model="simulation.dt"></md-text-float></section></md-toolbar><md-list><md-item layout="row" layout-align="center"><div><arch bricks="simulation.particles"></arch></div></md-item><md-divider></md-divider><md-item><md-button ng-click="simDetails = !simDetails">{{ simDetails ? "Hide" : "Show" }} Details</md-button></md-item><md-item ng-repeat="particle in simulation.particles" ng-if="simDetails"><md-item-content><div layout="row" class="md-tile-content"><div flex="5"><span>{{ $index }}</span></div><div layout="layout" flex="flex"><div flex="10" layout="layout" layout-align="center center"><span>X</span></div><md-slider flex="flex" min="0" max="1" step="0.001" ng-model="particle.position[0]" aria-label="X"></md-slider><div flex="20" layout="layout" layout-align="center center"><input type="number" ng-model="particle.position[0]"/></div></div><div layout="layout" flex="flex"><div flex="10" layout="layout" layout-align="center center"><span>Y</span></div><md-slider flex="flex" min="0" max="1" step="0.001" ng-model="particle.position[1]" aria-label="Y"></md-slider><div flex="20" layout="layout" layout-align="center center"><input type="number" ng-model="particle.position[1]"/></div></div></div></md-item-content></md-item></md-list></md-content>');});
angular.module('navigation.template', []).run(function($templateCache){$templateCache.put('navigation', '<md-button ng-repeat="sim in nav.sims" ui-sref="{{sim.name}}" class="menu-item menu-title">{{ sim.title || sim.name }}</md-button>');});
angular.module('arrow.template', []).run(function($templateCache){$templateCache.put('arrow', '<g ng-switch="arrow.point"><path ng-switch-default="ng-switch-default" ng-attr-transform="      rotate({{arrow.rotation}} {{ arrow.tip[0] }} {{ arrow.tip[1] }})       translate({{ arrow.tip[0] }} {{ arrow.tip[1] }})    " style="      stroke: {{ arrow.color }};      stroke-width: {{ arrow.weight || 1}}px;      fill: {{ arrow.fill }};    }" ng-attr-d="      M0 0      l{{ -arrow.length / 2 }} {{ - arrow.length * 3/12 }}      v{{  arrow.length / 6 }}      h{{ -arrow.length / 2 }}      v{{  arrow.length / 6 }}      h{{  arrow.length / 2 }}      v{{  arrow.length / 6 }}      z    "></path><path ng-switch-when="base" ng-attr-transform="      rotate({{arrow.rotation}} {{ arrow.tip[0] }} {{ arrow.tip[1] }})       translate({{ arrow.tip[0] }} {{ arrow.tip[1] }})    " style="      stroke: {{ arrow.color }};      stroke-width: {{ arrow.weight || 1}}px;      fill: {{ arrow.fill }};    }" ng-attr-d="      M0 0      v{{  arrow.length / 12 }}      h{{  arrow.length / 2 }}      v{{  arrow.length / 6 }}      l{{  arrow.length / 2 }} {{ - arrow.length * 3/12 }}      l{{ -arrow.length / 2 }} {{ - arrow.length * 3/12 }}      v{{  arrow.length / 6 }}      h{{ -arrow.length / 2 }}      z    "></path></g>');});
angular.module('simulation.beam.template', []).run(function($templateCache){$templateCache.put('simulation/beam', '<md-content class="md-padding"><md-toolbar class="md-whiteframe-z1"><md-content layout="row" layout-align="space-around"><md-input-container flex="50"><label class="md-no-float">Length:&nbsp;{{ simulation.length | number:1 }}&nbsp;m</label><md-slider aria-label="Set beam length." ng-model="simulation.length" min="0" max="10" step=".1"></md-slider></md-input-container><md-input-container flex="30"><div layout="row"><label class="md-no-float">Load:&nbsp;{{simulation.load.applied}}&nbsp;{{ simulation.load.loading == \'point\' ? \'kN\' : \'kN/m\'}}</label></div><md-slider aria-label="Set beam loading." ng-model="simulation.load.applied" min="50" max="100" step="1"></md-slider></md-input-container><md-input-container flex="20"><label class="md-no-float">Loading</label><md-select placeholder="Loading" ng-model="simulation.load.loading"><md-option ng-value="\'point\'">Concentrated</md-option><md-option ng-value="\'even\'">Distributed</md-option></md-select></md-input-container></md-content><md-content layout="row" layout-align="space-around"><md-input-container flex="50"><label class="md-no-float">Support:&nbsp;{{ simulation.support | number:1 }}&nbsp;m</label><md-slider aria-label="Set beam support point." ng-model="simulation.support" min="0" max="10" step=".1"></md-slider></md-input-container><div flex="flex"><md-input-container ng-hide="simulation.load.loading == \'even\'"><label class="md-no-float">Load&nbsp;Point&nbsp;{{ simulation.load.point | number:1}}m</label><md-slider aria-label="Set load point distance." ng-model="simulation.load.point" min="0.1" max="10" step=".1"></md-slider></md-input-container></div></md-content></md-toolbar><md-card layout="column" layout-align="space-around" graph-scales="{      xa: [\'linear\', -3, 13, 0, 400],       yb: [\'linear\', -1, .5, 0, 60],       yse: [\'linear\', -10000, 10000, 0, 100],       yme: [\'linear\', 12500, -12500, 0, 100],       ysp: [\'linear\', 160, -160, 0, 100],       ymp: [\'linear\', 400, -400, 0, 100],       applied: [\'log\', 10, 100, 10, 20],       b: [ \'linear\', 0, 1.06, 0, 100],       t: [\'linear\', 0, .0106, 1, 3],     }"><table width="100%"><tr><td width="20%"></td><td width="50%"><svg height="60px" width="400px"><path stroke="black" fill="none" ng-attr-d="                M{{$scales.xa(0)}},{{$scales.yb(0)}}                 L{{$scales.xa(simulation.length)}},{{$scales.yb(0)}}                 L{{$scales.xa(simulation.length)}},{{$scales.yb(0) - 10}}                 L{{$scales.xa(0)}},{{$scales.yb(0) - 10}}                 Z               "></path><g><arrow ng-if="simulation.load.loading == \'point\'" color="\'blue\'" rotation="90" length="$scales.applied(simulation.load.applied)" tip="[$scales.xa(simulation.load.point), $scales.yb(0) - 10]"></arrow><g ng-if="simulation.load.loading == \'even\'"><path stroke="blue" fill="none" ng-attr-d="                    M{{$scales.xa(0)}},{{$scales.yb(0) - (10 + $scales.applied(simulation.load.applied))}}                    L{{$scales.xa(simulation.length)}},{{$scales.yb(0) - (10 + $scales.applied(simulation.load.applied))}}                  "></path><arrow ng-repeat="a in forall(simulation.length)" color="\'blue\'" rotation="90" length="$scales.applied(simulation.load.applied)" tip="[$scales.xa(simulation.length * ($index / Math.ceil(simulation.length))), $scales.yb(0) - 10]"></arrow></g></g><g><g ng-if="simulation.support &gt; 0"><circle stroke="green" fill="none" radius="5" center="[                    $scales.xa(simulation.support) + 1,                     $scales.yb(0) + 6                   ]"></circle><path fill="none" stroke="green" ng-attr-d="                    M{{ $scales.xa(0)}}, {{ $scales.yb(0) }}                    l5,10 h-10 z                   "></path></g><g ng-if="simulation.support == 0"><path fill="none" stroke="green" stroke-width="2px" ng-attr-d="                    M{{$scales.xa(0)}}, {{ $scales.yb(0) - 15}},                    v30 m0,-5, l-10,5 m10,-5 m0,-10, l-10,5 m10,-5, m0,-10, l-10,5                  "></path></g></g></svg></td><td width="30%" rowspan="3" valign="top" align="center" ng-if="simulation.showBeam"><md-content layout="column" layout-align="space-around"><md-input-container><label class="md-no-float">Material&nbsp;Stress:&nbsp;\n{{ currentMaterial.elasticity | scientific }}&nbsp;\nkN/m<sup>2</sup></label><md-select ng-model="$parent.materialName" placeholder="Material"><md-option ng-repeat="material in materials" ng-value="material">{{ material }}</md-option></md-select></md-input-container><md-input-container><label class="md-no-float">Beam&nbsp;Cross-Section</label><md-select ng-model="crossSection" placeholder="Cross-Section"><md-option ng-repeat="section in crossSections" ng-value="section">{{ section.name }}</md-option></md-select></md-input-container></md-content><md-content class="md-padding"><svg height="100px" width="100px"><g transform="translate(50, 50)" transform-origin="50% 50%"><path ng-if="crossSection.name == \'Solid\'" stroke="blue" fill="blue" ng-attr-d="                    M-{{$scales.b(crossSection.b())/2}}, -{{$scales.b(crossSection.b())/2}}                     h {{$scales.b(crossSection.b())}}                    v {{$scales.b(crossSection.b())}}                    h-{{$scales.b(crossSection.b())}}                    z                  "></path><path ng-if="crossSection.name == \'Hollow\'" stroke="blue" ng-attr-stroke-width="{{$scales.t(crossSection.t())}}" fill="none" ng-attr-d="                    M-{{$scales.b(crossSection.b())/2}}, -{{$scales.b(crossSection.b())/2}}                     h{{$scales.b(crossSection.b())}}                    v{{$scales.b(crossSection.b())}}                    h-{{$scales.b(crossSection.b())}}                    z                  "></path><path ng-if="crossSection.name == \'I-Beam\'" stroke="blue" fill="none" ng-attr-stroke-width="{{$scales.t(crossSection.t())}}" ng-attr-d="                    M-{{$scales.b(crossSection.b())/2}}, -{{$scales.b(crossSection.b())/2}}                     h {{$scales.b(crossSection.b())}}                    h-{{$scales.b(crossSection.b())/2}}                    v {{$scales.b(crossSection.b() * 1.5)}}                    h-{{$scales.b(crossSection.b())/2}}                    h {{$scales.b(crossSection.b())}}                    h-{{$scales.b(crossSection.b())/2}}                    v-{{$scales.b(crossSection.b() * 1.5)}}                    z                  "></path></g></svg></md-content><md-content class="md-padding"><b>Width:&nbsp;</b>{{ crossSection.b()*100|number:0 }}&nbsp;cm<br/><b>Area:&nbsp;</b>{{ crossSection.area()*10000|number:0 }}&nbsp;cm<sup>2</sup></md-content></td></tr><tr><td valign="top" class="md-padding"><b>Shear</b><br/>Vmax: {{ MaxV() | number:0 }} kN</td><td><svg ng-if="simulation.load.loading == \'even\'" height="100px" width="400px" graph-tick="vs = Vs()"><path ng-if="simulation.support &gt; 0" stroke="black" fill="green" ng-attr-d="                M{{$scales.xa(0)}},{{$scales.yse(0)}}                 L{{$scales.xa(0)}},{{$scales.yse(0 - V(1))}}                 L{{$scales.xa(simulation.support)}},{{$scales.yse(0 + V(3))}}                 L{{$scales.xa(simulation.support)}},{{$scales.yse(0 - V(2))}}                 L{{$scales.xa(simulation.length)}},{{$scales.yse(0)}}                 z               "></path><path ng-if="simulation.support == 0" stroke="black" fill="green" ng-attr-d="                M{{$scales.xa(0)}},{{$scales.yse(0)}}                 L{{$scales.xa(0)}},{{$scales.yse(0 - V(1))}}                 L{{$scales.xa(simulation.length)}},{{$scales.yse(0)}}                 z               "></path></svg><svg ng-if="simulation.load.loading == \'point\'" height="100px" width="400px"><path stroke="black" fill="green" ng-attr-d="                M{{ $scales.xa(0) }} {{ $scales.ysp(0)}}                L{{ $scales.xa(0) }} {{ $scales.ysp(V(1))}}                L{{ $scales.xa(Math.min(simulation.load.point, simulation.support))}} {{ $scales.ysp(V(1))}}                L{{ $scales.xa(Math.min(simulation.load.point, simulation.support))}} {{ $scales.ysp(V(2))}}                L{{ $scales.xa(Math.max(simulation.load.point, simulation.support)) }} {{ $scales.ysp(V(2)) }}                 L{{ $scales.xa(Math.max(simulation.load.point, simulation.support)) }} {{ $scales.ysp(0) }}                 z              "></path></svg></td></tr><tr><td valign="top" class="md-padding"><b>Moment</b><br/>Mmax:&nbsp;{{ MaxM() | number:0 }}&nbsp;kNm</td><td><svg ng-if="simulation.load.loading == \'even\'" height="260px" width="400px"><path stroke="black" fill="orange" ng-attr-d="{{moment($scales)}}"></path></svg><svg ng-if="simulation.load.loading == \'point\'" height="100px" width="400px"><path stroke="black" fill="orange" ng-attr-d="                M{{ $scales.xa(0) }} {{$scales.ymp(0)}}                 L{{ $scales.xa( Math.min(simulation.load.point, simulation.support) )}} {{$scales.ymp(pointMoment())}}                 L{{ $scales.xa( Math.max(simulation.load.point, simulation.support) )}} {{ $scales.ymp(0) }}                 z               "></path></svg></td></tr></table></md-card></md-content>');});
angular.module('simulation.arch.template', []).run(function($templateCache){$templateCache.put('simulation/arch', '<md-content class="md-padding"><md-toolbar class="md-whiteframe-z1"><md-content layout="row" layout-align="space-around"><md-input-container flex="33"><label class="md-no-float">Applied&nbsp;Load&nbsp;{{ simulation.applied | number:0}}&nbsp;kN/m</label><md-slider aria-label="Applied Load in kilonewtons per meter." ng-model="simulation.applied" step="0.5" min="0" max="250" class="md-primary"></md-slider></md-input-container><md-input-container flex="33"><label class="md-no-float">Height&nbsp;{{ simulation.height | number:0}}&nbsp;m</label><md-slider aria-label="Arch height, in meters." ng-model="simulation.height" min="10" max="200" step="1" class="md-primary"></md-slider></md-input-container><md-input-container flex="33"><label class="md-no-float">Span&nbsp;{{ simulation.span | number:0}}&nbsp;m</label><md-slider aria-label="Arch span, in meters." ng-model="simulation.span" min="30" max="400" step="1" class="md-primary"></md-slider></md-input-container></md-content></md-toolbar><md-card layout="row" layout-align="space-around"><md-content flex="30" layout="column" class="md-padding"><div layout="column"><md-button ng-init="showCompressiveHelp = false" ng-click="showCompressiveHelp = !showCompressiveHelp" class="md-raised md-warn"><b>Compressive:</b><br/><span style="text-transform: none;">{{ force.horizontal() | number:0 }}&nbsp;kN</span></md-button><span ng-show="showCompressiveHelp">This is the horizontal reaction force at the base or support point of the arch. The horizontal force is equal to the internal compressive force, C, for an arch with a funicular form.</span></div><div layout="column"><md-button ng-init="showVerticalHelp = false" ng-click="showVerticalHelp = !showVerticalHelp" class="md-raised md-accent"><b>Vertical:</b><br/><span style="text-transform: none;">{{ force.vertical() | number:0 }}&nbsp;kN</span></md-button><span ng-show="showVerticalHelp">This is the vertical reaction force at the base or support point of the arch. The vertical force must balance out the applied load.</span></div><div flex="flex"></div></md-content><div flex="flex" layout="row" layout-align="center center"><svg height="250px" width="500px" graph-scales="{          x: [\'linear\', -250, 250],           y: [\'linear\', 175, -125],           rx: [\'linear\', 0, 500, 0, 500],           ry: [\'linear\', 0, 750, 0, 500],           ax: [\'linear\', 0, force.horizontal.max, 10, 45],          ay: [\'linear\', 0, force.vertical.max, 5, 45],          applied: [\'linear\', 0, 450, 1, 17]        }"><g id="arch"><path stroke="black" stroke-width="1px" fill="lightgrey" ng-attr-d="              M{{ $scales.x(-simulation.span / 2) }} {{ $scales.y(0) }}              A {{ $scales.rx(simulation.span / 2) }} {{ $scales.ry(simulation.height) }}                0, 0, 1,                 {{ $scales.x(simulation.span / 2) }} {{ $scales.y(0) }}              L{{ $scales.x(simulation.span / 2 * .9) }} {{ $scales.y(0) }}              A{{ $scales.rx(simulation.span / 2 * .9) }} {{ $scales.ry(simulation.height * .9) }}                0, 0, 0,                 {{ $scales.x(-simulation.span / 2 * .9) }} {{ $scales.y(0) }}              Z            "></path></g><g id="arrows"><g id="applied_arrows"><arrow ng-repeat="a in forall($scales.applied(simulation.span))" color="\'green\'" rotation="90" tip="[                 $scales.x((-simulation.span / 2) + ($index * simulation.span / Math.floor($scales.applied(simulation.span)))),                 $scales.y(simulation.height/2)               ]" length="$scales.applied(simulation.applied)"></arrow><path stroke="green" stroke-width="1px" ng-attr-d="                M{{ $scales.x(-simulation.span / 2) }} {{ $scales.y(simulation.height/2) }}                L{{ $scales.x( simulation.span / 2) }} {{ $scales.y(simulation.height/2) }}                M{{ $scales.x(-simulation.span / 2) }} {{ $scales.y(simulation.height/2) - $scales.applied(simulation.applied) }}                L{{ $scales.x( simulation.span / 2) }} {{ $scales.y(simulation.height/2) - $scales.applied(simulation.applied) }}              "></path></g><arrow color="\'rgb(244,67,54)\'" rotation="0" tip="[$scales.x(-simulation.span / 2), $scales.y(0)]" length="$scales.ax(force.compressive())"></arrow><arrow color="\'rgb(68,138,255)\'" rotation="-90" tip="[$scales.x(-simulation.span / 2), $scales.y(0)]" length="$scales.ay(force.vertical())"></arrow><arrow color="\'rgb(244,67,54)\'" rotation="180" tip="[$scales.x(0), $scales.y(simulation.height/2 * 0.9)]" length="$scales.ax(force.compressive())"></arrow></g></svg></div></md-card></md-content>');});
angular.module('simulation.compression.template', []).run(function($templateCache){$templateCache.put('simulation/compression', '<md-content class="md-padding"><md-toolbar class="md-whiteframe-z1"><md-content layout="row" layout-align="space-around"><md-input-container flex="50"><label>Elasticity&nbsp;{{ currentMaterial.elasticity | scientific }}&nbsp;\nkN/m<sup>2</sup></label><md-select ng-model="materialName" placeholder="Material"><md-option ng-repeat="material in materials" ng-value="material">{{ material }}</md-option></md-select></md-input-container><md-input-container flex="50"><md-select placeholder="Shape" ng-model="shapeName"><md-option ng-repeat="shape in shapes" ng-value="shape">{{ shape }}</md-option></md-select></md-input-container></md-content><md-content layout="row" layout-align="space-around"><md-input-container flex="flex"><label class="md-no-float">Base&nbsp;Diameter&nbsp;{{ simulation.base | number:2}}m</label><md-slider aria-label="Set column base diameter." ng-model="simulation.base" min="0.05" max="1" step=".05"></md-slider></md-input-container><md-input-container flex="flex"><label class="md-no-float">Length&nbsp;{{ simulation.length | number:2}}m</label><md-slider aria-label="Set column height." ng-model="simulation.length" min="1" max="5" step=".05"></md-slider></md-input-container></md-content></md-toolbar><md-card layout="row" layout-align="space-around"><md-content flex="30" layout="column" class="md-padding"><div flex="10" layout="column"><md-button ng-show="showLoad" ng-class="{            \'md-warn\': simulation.failed()          }" class="md-raised">Failure&nbsp;Mode:<br/>{{ simulation.failed() ? (simulation.buckle() > simulation.compression() ? \'COMPRESSION\' : \'BUCKLE\') : \'Nominal\' }}</md-button><md-button ng-hide="showLoad" ng-click="calcLoad()" class="md-raised">Calculate Load</md-button></div><div flex="10" layout="column" ng-show="showLoad &amp;&amp; simulation.compression() &gt; simulation.buckle()"><b>Buckling Load:</b>{{ simulation.buckle() | number:0 }}&nbsp;kN</div><div flex="10" layout="column" ng-show="showLoad &amp;&amp; simulation.buckle() &gt; simulation.compression()"><b>Compressive Load:</b>{{ simulation.compression() | number:0 }}&nbsp;kN</div><div flex="flex"></div></md-content><div flex="flex" layout="row" layout-align="center center"><svg height="400px" width="200px" graph-scales="{          x: [\'linear\', -1.5, 1],           y: [\'linear\', 6, -0.1],           dx: [\'linear\', 0, 7.75, 0, 400],           dy: [\'linear\', 0, 25, 0, 800],         }"><g id="square" ng-if="currentShape.shape == \'Square\' || currentShape.shape == \'Hollow Square\'"><path id="square_face" stroke="black" stroke-width="1px" ng-attr-fill="{{currentMaterial.color}}" ng-attr-d="              M{{ $scales.x(-simulation.base) }},{{ $scales.y(0) }}              Q {{ $scales.x(-simulation.base - simulation.deflection(5) )}},{{ $scales.y(simulation.length / 3) }},                {{ $scales.x(-simulation.base - simulation.deflection(5) )}},{{ $scales.y(simulation.length / 2) }}               Q {{ $scales.x(-simulation.base - simulation.deflection(5) )}},{{ $scales.y(2 * simulation.length / 3) }},                {{ $scales.x(-simulation.base) }},{{ $scales.y(simulation.length) }}              L{{ $scales.x( simulation.base / 4) }},{{ $scales.y(simulation.length - (3 * simulation.base / 4)) }}              Q {{ $scales.x(simulation.base / 4 - simulation.deflection(5) )}},{{ $scales.y(2 * simulation.length / 3 - simulation.base / 4) }},                {{ $scales.x(simulation.base / 4 - simulation.deflection(5) )}},{{ $scales.y(simulation.length / 2 - simulation.base / 4) }}              Q {{ $scales.x(simulation.base / 4 - simulation.deflection(5) )}},{{ $scales.y(simulation.length / 3 - simulation.base / 3) }},                {{ $scales.x(simulation.base / 4)}},{{ $scales.y( -3 * simulation.base / 4) }}              Z            "></path><path id="square_side" stroke="black" stroke-width="1px" ng-attr-fill="{{currentMaterial.color}}" ng-attr-d="              M{{ $scales.x(simulation.base / 4) }},{{ $scales.y(simulation.length - (3 * simulation.base / 4)) }}              Q {{ $scales.x(simulation.base / 4 - simulation.deflection(5) )}},{{ $scales.y(2 * simulation.length / 3 - simulation.base / 4) }},                {{ $scales.x(simulation.base / 4 - simulation.deflection(5) )}},{{ $scales.y(simulation.length / 2 - simulation.base / 4) }}              Q {{ $scales.x(simulation.base / 4 - simulation.deflection(5) )}},{{ $scales.y(simulation.length / 3 - simulation.base / 3) }},                {{ $scales.x(simulation.base / 4)}},{{ $scales.y( -3 * simulation.base / 4) }}              L{{ $scales.x( simulation.base) }},{{ $scales.y( 0 ) }}              Q {{ $scales.x( simulation.base - simulation.deflection(5)) }},{{ $scales.y( simulation.length / 3) }},                {{ $scales.x( simulation.base - simulation.deflection(5)) }},{{ $scales.y( simulation.length / 2) }}              Q {{ $scales.x( simulation.base - simulation.deflection(5)) }},{{ $scales.y(2 *simulation.length / 3) }},                {{ $scales.x( simulation.base) }},{{ $scales.y(simulation.length) }}              Z            "></path><path id="square_top" stroke="black" stroke-width="1px" ng-attr-fill="{{currentMaterial.color}}" ng-attr-d="              M{{ $scales.x(-simulation.base) }},{{ $scales.y(simulation.length) }}              L{{ $scales.x(-simulation.base * 1/4) }},{{ $scales.y(simulation.length + simulation.base * 3/4) }}               L{{ $scales.x( simulation.base) }},{{ $scales.y(simulation.length) }}              L{{ $scales.x( simulation.base * 1/4) }},{{ $scales.y(simulation.length - simulation.base * 3/4) }}              Z            "></path></g><g id="hollow_square" ng-if="currentShape.shape == \'Hollow Square\'"><path id="hollow_square_top" stroke="black" stroke-width="1px" ng-attr-fill="{{currentMaterial.color}}" ng-attr-d="              M{{ $scales.x(-simulation.base * 3/4) }},{{ $scales.y(simulation.length) }}              L{{ $scales.x(-simulation.base * 1/4 * 3/4) }},{{ $scales.y(simulation.length + (simulation.base * 3/4 * 3/4) ) }}               L{{ $scales.x(-simulation.base * 1/4 * 3/4) }},{{ $scales.y(simulation.length - (simulation.base * 11/32) ) }}               L{{ $scales.x(-simulation.base * 1/4 * 3/4) }},{{ $scales.y(simulation.length + (simulation.base * 3/4 * 3/4) ) }}               L{{ $scales.x( simulation.base * 3/4) }},{{ $scales.y(simulation.length) }}              L{{ $scales.x( simulation.base * 1/4 * 3/4) }},{{ $scales.y(simulation.length - (simulation.base * 3/4 * 3/4) ) }}              Z            "></path></g><g id="pipe" ng-if="currentShape.shape == \'Pipe\' || currentShape.shape == \'Hollow Pipe\'"><path id="pipe_face" stroke="black" stroke-width="1px" ng-attr-fill="{{currentMaterial.color}}" ng-attr-d="              M{{ $scales.x(-simulation.base) }},{{ $scales.y(0) }}              Q {{ $scales.x(-simulation.base - simulation.deflection(5) )}},{{ $scales.y(simulation.length / 3) }},                {{ $scales.x(-simulation.base - simulation.deflection(5) )}},{{ $scales.y(simulation.length / 2) }}               Q {{ $scales.x(-simulation.base - simulation.deflection(5) )}},{{ $scales.y(2 * simulation.length / 3) }},                {{ $scales.x(-simulation.base) }},{{ $scales.y(simulation.length) }}              L {{ $scales.x( simulation.base) }},{{ $scales.y(simulation.length) }}              Q {{ $scales.x( simulation.base - simulation.deflection(5)) }},{{ $scales.y(2 *simulation.length / 3) }},                {{ $scales.x( simulation.base - simulation.deflection(5)) }},{{ $scales.y( simulation.length / 2) }}              Q {{ $scales.x( simulation.base - simulation.deflection(5)) }},{{ $scales.y( simulation.length / 3) }},                {{ $scales.x( simulation.base) }},{{ $scales.y(0) }}              Q {{ $scales.x( simulation.base) }}, {{ $scales.y(- simulation.base * 3/4) }}                {{ $scales.x( simulation.base * 1/4) }},{{ $scales.y(- simulation.base * 3/4) }}              Q {{ $scales.x(-simulation.base) }}, {{ $scales.y(- simulation.base * 3/4) }}                {{ $scales.x(-simulation.base) }},{{ $scales.y(0) }}            "></path><ellipse id="pipe_top" stroke="black" stroke-width="1px" ng-attr-fill="{{currentMaterial.color}}" center="$scales([0, simulation.length])" ng-attr-rx="{{ $scales.dx( simulation.base ) }}" ng-attr-ry="{{ $scales.dy(simulation.base * 3/4) }}"></ellipse></g><g id="pipe" ng-if="currentShape.shape == \'Hollow Pipe\'"><ellipse id="hollow_pipe_top" stroke="black" stroke-width="1px" ng-attr-fill="{{currentMaterial.color}}" center="$scales([0, simulation.length])" ng-attr-rx="{{ $scales.dx( simulation.base * 3/4 ) }}" ng-attr-ry="{{ $scales.dy(simulation.base * 9/16 ) }}"></ellipse></g><g ng-if="simulation.failed() &amp;&amp; simulation.buckle() &gt; simulation.compression()"><path stroke="black" stroke-width="1px" fill="yellow" d="M29,{{ $scales.y( simulation.length * 3/4) }} l53,14 l-9,-26 l26,26 l23,-40 l-0,43 l23,-1 l-14,15 l35,6 l-39,6 l26,27 l-33,-13 l0,34 l-13,-21 l-3,8 l-5,-7 l-9,23 l-2,-20 l-27,25 l14,-39 l-47,7 l47,-23 l-47,-15 l34,-2z"></path></g></svg></div></md-card></md-content>');});
angular.module('simulation.sdof.template', []).run(function($templateCache){$templateCache.put('simulation/sdof', '<md-content class="md-padding"><md-toolbar class="md-whiteframe-z1"><md-content layout="column"><section layout="row" layout-align="space-around"><md-input-container flex="flex"><label class="md-no-float">Length:&nbsp;{{simulation.length | number:1}}&nbsp;m</label><md-slider aria-label="Set beam length." ng-model="simulation.length" min="1" max="15" step=".1"></md-slider></md-input-container><md-input-container flex="flex"><label class="md-no-float">Cross-section:&nbsp;{{simulation.cross * 100 | number:0}}&nbsp;cm</label><md-slider aria-label="Set beam cross section." ng-model="simulation.cross" min=".05" max=".5" step=".01"></md-slider></md-input-container><md-input-container flex="flex"><label class="md-no-float">Mass:&nbsp;{{simulation.mass | number:0}}&nbsp;kg</label><md-slider aria-label="Set supported mass." ng-model="simulation.mass" min="100" max="100000" step="100"></md-slider></md-input-container><md-input-container flex="flex"><label class="md-no-float">Material&nbsp;Elasticity:&nbsp;\n{{ currentMaterial.elasticity | scientific }}&nbsp;\nkN/m<sup>2</sup></label><md-select ng-model="materialName" placeholder="Material"><md-option ng-repeat="material in materials" ng-value="material">{{ material }}</md-option></md-select></md-input-container></section></md-content></md-toolbar><md-card layout="row" layout-align="space-around"><md-content class="md-padding"><b>Frequency:</b>&nbsp;{{ frequency() | number:3 }}&nbsp;hz<br/><em>{{ 1 / frequency() | number:3 }} seconds per oscillation</em></md-content><svg height="125px" width="200px" graph-scales="{        l: [\'linear\', 0, 20, 0, 100],         r: [\'linear\', 100, 100000, 5, 25],         m: [\'linear\', 0, theta, 0, 1],       }" graph-tick="        angle = tick();         l = $scales.l(simulation.length);         ca = Math.cos(angle);         sa = Math.sin(angle);         m = Math.abs($scales.m(angle));       "><g transform="translate(100, 100) rotate(-90)"><path stroke="black" stroke-width="5px" fill="none" ng-attr-d="M0,0            Q               {{ m * (l/6) + (l/2) }} 0               {{ l * ca }} {{ l * sa}}           "></path><circle center="[l * ca, l * sa]" ng-attr-r="{{ $scales.r(simulation.mass) }}" stroke="none" fill="red"></circle></g></svg></md-card></md-content>');});
angular.module('simulation.truss.template', []).run(function($templateCache){$templateCache.put('simulation/truss', '<md-content class="md-padding"><md-toolbar class="md-whiteframe-z1"><md-content layout="row" layout-align="space-around"><md-input-container flex="33" class="md-padding"><label class="md-no-float">Truss Form</label><md-select placeholder="Form" ng-model="simulation.form"><md-option ng-repeat="form in forms" ng-value="form">{{ form }}</md-option></md-select></md-input-container><md-input-container flex="33" class="md-padding"><label class="md-no-float">Applied Load</label><md-select placeholder="Applied load" ng-model="simulation.load"><md-option ng-repeat="load in [120, 240, 480]" ng-value="load">{{ load }} kN</md-option></md-select></md-input-container><md-input-container flex="33"><label class="md-no-float">Load Distribution</label><md-select placeholder="Loading" ng-model="simulation.loading"><md-option ng-repeat="load in loading" ng-value="load">{{ load }}</md-option></md-select></md-input-container></md-content><md-content layout="row" layout-align="space-around"><md-input-container flex="flex"><label class="md-no-float">Truss&nbsp;Span:&nbsp;{{ simulation.span | number:1}}m</label><md-slider aria-label="Truss span, in meters." ng-model="simulation.span" min="5" max="100" step="1"></md-slider></md-input-container><md-input-container flex="flex"><label class="md-no-float">Truss&nbsp;Height:&nbsp;{{ simulation.height | number:1}}m</label><md-slider aria-label="Control truss height, in meters." ng-model="simulation.height" min="2" max="10" step=".1"></md-slider></md-input-container></md-content></md-toolbar><md-card layout="row" layout-align="space-around"><div flex="15" layout="column"><md-content class="md-padding"><div layout="row" ng-repeat="(connection, beam) in _truss.beams"><div flex="33"><b>{{ connection }}</b></div><div flex="66" style="text-align: right"><span style="                color: hsl({{beam.load &gt; 0 ? 200 : 0}}, {{$scales.saturation(Math.abs(beam.load))}}%, 50%);               ">{{ beam.load | number:0 }}</span>&nbsp;kN</div></div></md-content></div><div flex="flex" layout="row" layout-align="center center"><svg height="200px" width="600px" graph-scales="{          x: [\'linear\', -50, 50],           y: [\'linear\', 30, -3],           saturation: [\'log\', ex.load.min, ex.load.max, 35, 100],           stroke: [\'log\', ex.load.min, ex.load.max, 0.5, 8],           arrow: [\'log\', 120/3, 480, 10, 25],         }" graph-tick="          _truss = truss();         "><g><line ng-repeat="(connection, beam) in _truss.beams" from="$scales(beam.from)" to="$scales(beam.to)" style="               stroke: hsl({{beam.load &gt; 0 ? 200 : 0}}, {{$scales.saturation(Math.abs(beam.load)) || 0}}%, 50%);               stroke-width: {{$scales.stroke(Math.abs(beam.load)) || 1}}px;             "></line><text ng-repeat="(label, point) in _truss.points | filter:point[1]:0" at="[              $scales.x(point[0]) + (                 point[1] == 0                 ? (Math.sign(point[0]) || -1) * (                  label == \'H\' ?                  -12 :                   -10                )                 : 0              ),               $scales.y(point[1]) + (point[1] == 0 ? 18 : -5)             ]" text-anchor="middle">{{ label }}</text></g><g><circle r="5" fill="none" stroke="green" center="[$scales.x(_truss.points.A[0])+1, $scales.y(0) + 6]"></circle><path fill="none" stroke="green" ng-attr-d="              M{{ $scales.x(_truss.points.H[0])}}, {{ $scales.y(0) }}              l5,10 h-10 z             "></path></g><g ng-if="simulation.loading === \'Center\'"><arrow color="\'hsl(135, 25%, 50%)\'" rotation="90" tip="[$scales.x(0), $scales.y(0) + $scales.arrow(simulation.load)]" length="$scales.arrow(simulation.load)"></arrow></g><g ng-if="simulation.loading === \'Even\'"><arrow ng-repeat="x in [_truss.points.C, _truss.points.E, _truss.points.G]" color="\'hsl(135, 25%, 50%)\'" rotation="90" tip="[$scales.x(x[0]), $scales.y(0) + $scales.arrow(simulation.load / 3)]" length="$scales.arrow(simulation.load / 3)"></arrow></g><g ng-if="simulation.loading === \'Left\'"><arrow ng-repeat="x in [_truss.points.C]" color="\'hsl(135, 25%, 50%)\'" rotation="90" tip="[$scales.x(x[0]), $scales.y(0) + $scales.arrow(simulation.load)]" length="$scales.arrow(simulation.load)"></arrow></g></svg></div></md-card></md-content>');});
angular.module('simulation.tension.template', []).run(function($templateCache){$templateCache.put('simulation/tension', '<md-content class="md-padding"><md-toolbar class="md-whiteframe-z1 toolbar"><section layout="row"><md-content flex="flex" layout="column" layout-align="space-around"><md-input-container flex="flex"><md-select ng-model="simulation.material" placeholder="Material"><md-option ng-repeat="material in materials" ng-value="material">{{ material.name }}</md-option></md-select></md-input-container><md-input-container flex="flex"><label class="md-no-float">Cable&nbsp;Thickness:&nbsp;{{ simulation.diameter | number:2}}&nbsp;mm</label><md-slider aria-label="Thickness of the cable, in millimeters." ng-model="simulation.diameter" min="1" max="50" step=".1"></md-slider></md-input-container></md-content><md-content flex="flex" layout="column" layout-align="space-around"><md-input-container flex="flex"><label class="md-no-float">Anchor&nbsp;Width:&nbsp;{{ simulation.width | number:2}}&nbsp;m</label><md-slider aria-label="Set anchor width, in meters." ng-model="simulation.width" min="0.05" max="20" step=".05"></md-slider></md-input-container><md-input-container flex="flex"><label class="md-no-float">Pull&nbsp;Depth&nbsp;{{ simulation.pull | number:2}}&nbsp;m</label><md-slider aria-label="How far the anchor is pulled, in meters." ng-model="simulation.pull" min="0.05" max="10" step=".05"></md-slider></md-input-container></md-content></section></md-toolbar><md-card layout="row" layout-align="space-around"><md-content flex="30" layout="column" class="md-padding"><div flex="10" layout="column"><div class="md-padding"><b>Maximum&nbsp;load:</b><br/>{{ simulation.load() / 1e6 |number:2 }}\n&nbsp;mN</div></div><div flex="flex"></div></md-content><div flex="flex" layout="row" layout-align="center center"><svg height="300px" width="300px" graph-scales="{          x: [\'linear\', -12, 12],           y: [\'linear\', -8, 16],           r: [\'linear\', 1, 50, 0.5, 6],          force: [\'linear\', 0, 1000000000, 8, 50],         }"><path ng-style="{            \'stroke\': \'blue\',            \'stroke-width\': $scales.r(simulation.diameter),            \'fill\': \'none\'          }" ng-attr-d="            M {{$scales.x(-simulation.width/2)}} {{$scales.y(0)}}            L {{$scales.x(0)}} {{$scales.y(simulation.pull)}}            L {{$scales.x(simulation.width/2)}} {{$scales.y(0)}}          "></path><arrow color="\'purple\'" rotation="90" tip="[$scales.x(0), $scales.y(simulation.pull) + $scales.force(simulation.load())]" length="$scales.force(simulation.load())"></arrow><arrow color="\'red\'" rotation="-thetaDeg()" fill="none" tip="[$scales.x(simulation.width / 2), $scales.y(0)]" length="$scales.force(simulation.stress())" point="\'base\'"></arrow><arrow color="\'red\'" rotation="180 + thetaDeg()" fill="none" tip="[$scales.x(-simulation.width / 2), $scales.y(0)]" length="$scales.force(simulation.stress())" point="\'base\'"></arrow></svg></div></md-card></md-content>');});
angular.module('simulation.arch.brick.template', []).run(function($templateCache){$templateCache.put('simulation/arch/brick', '<rect width="76.25" height="22.5" stroke="#BFBFBF" fill="#AF4848" stroke-width="2px"></rect>');});